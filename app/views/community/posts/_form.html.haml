.card-content
  = simple_form_for(post, url: action, remote: :true, format: :js) do |f|
    .field.is-horizontal
      .field-body
        .field
          = f.label :title, "Titulo del post", class: "label"
          .control
            = f.input :title, class: 'input', placeholder: t("placeholders.title")
        .field
          = f.label :coworker_id, "Responsable del post", class: "label"
          .control
            .select.is-marginless
              = f.select :coworker_id, @node.campain.coworkers.map { |coworker| [coworker.email, coworker.id] }, include_blank: false, prompt: "Selecciona el encargado del nodo", selected: post.responsable&.id
        .field
          = f.label :publish_at, "Fecha de publicación", class: "label"
          .control
            = f.input :publish_at
        .field
          = f.label :auto_publish, "Auto-publicar", class: "label"
          .control
            = f.input_field :auto_publish, as: :boolean

    .column.is-12
      = f.submit submit, class: 'button is-primary'
      - unless post.new_record?
        = link_to " Eliminar", community_node_post_path(post.node, post), method: :delete, class: "fa fa-trash has-regular-margin", remote: true, data: { confirm: "¿Seguro que deseas eliminar el post?"}


  - unless post.new_record?
    .has-regular-padding-top
      %p.is-size-5.has-text-weight-semibold
        Peticiones del post
      %table.table.has-full-width.has-regular-margin
        %thead
          %tr
            %th
              Encargado
            %th
              Mensage
            %th
              Estado
            %th
              Cambiar estado a:
        %tbody
          - post.petitions.each do |petition|
            - if petition.user
              %tr
                %td
                  %p=petition.responsable.email
                %td
                  %p=petition.message
                %td
                  %p=t("statuses.#{petition.status}")
                %td
                  %p
                    - if petition.status == "active" || petition.status == "approved"
                      = link_to 'Pendiente', petition_path(petition, status: :pending), method: :patch
                    - else
                      = link_to 'Aprovada', petition_path(petition, status: :approved), method: :patch

    .has-regular-padding-top
      = simple_form_for(Petition.new) do |f|
        .label.is-size-5
          Crear nueva peticion
        = f.input :post_id, input_html: {class: "is-hidden", value: post.id}
        .field.is-horizontal
          .field-body
            .field
              = f.label :coworker_id, "Asignar peticion a:", class: "label"
              .control
                .select.is-marginless
                  = f.select :coworker_id, @node.campain.coworkers.map { |coworker| [coworker.email, coworker.id] }, prompt: "Selecciona al responsable", selected: post.responsable&.id
            .field
              = f.label :status, "Estado de la peticion", class: "label"
              .control
                .select.is-marginless
                  = f.select :status, Petition.statuses.keys.map { |status| [ t("statuses.#{status}"), status ] }, prompt: "Selecciona un estado"
        = f.label :message, 'Descripción', class: "label"
        = f.input :message, class: "input", placeholder: "Describa la peticion a generar"
        .column.is-12
          = f.submit t("helpers.label.post.submit"), class: 'button is-primary'
